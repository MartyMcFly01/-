# Generated by Django 3.2.4 on 2021-07-17 17:44

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, null=True, verbose_name='Факультет')),
                ('poll_result_link', models.CharField(max_length=100, null=True, verbose_name='Ссылка на результаты опроса')),
            ],
            options={
                'verbose_name': 'Факультет',
                'verbose_name_plural': 'Факультеты',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20, verbose_name='Код')),
                ('faculty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mainapp.faculty', verbose_name='Факультет')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='Locale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50, unique=True)),
                ('value', models.TextField(null=True)),
            ],
            options={
                'verbose_name': 'Текст',
                'verbose_name_plural': 'Текста',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='Вопрос')),
                ('answer_tip', models.TextField(blank=True, null=True, verbose_name='Примечания')),
                ('answer_options', models.PositiveSmallIntegerField(choices=[(5, '1-5'), (2, 'Нет/Да')], default=5, verbose_name='1-5 или нет/да')),
                ('is_for_eng', models.BooleanField(default=False, verbose_name='для Англ')),
                ('is_for_lec', models.BooleanField(default=False, verbose_name='для Лектора')),
                ('is_for_pra', models.BooleanField(default=False, verbose_name='для Практика')),
                ('is_two_answers', models.BooleanField(default=False, verbose_name='Разделять ответы для лектора и практика')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=32, verbose_name='ID ответившего')),
                ('teacher_type', models.CharField(choices=[('LECTOR', 'Лектор'), ('PRACTIC', 'Практик'), ('LECTOR_PRACTIC', 'Лектор и практик'), ('ENG', 'Английский')], max_length=20, null=True, verbose_name='Тип опросника')),
                ('open_question_answer', models.TextField(blank=True, null=True, verbose_name='Ответ свободного микрофона')),
                ('time_start', models.DateTimeField(auto_now_add=True, verbose_name='Время начала прохождения')),
                ('time_finish', models.DateTimeField(default=None, null=True, verbose_name='Время окончания прохождения')),
            ],
            options={
                'verbose_name': 'Результат опроса',
                'verbose_name_plural': 'Результаты опроса',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Имя')),
                ('photo', models.CharField(blank=True, max_length=500, null=True, verbose_name='Ссылка на фото')),
                ('is_eng', models.BooleanField(default=False, verbose_name='Это англ?')),
                ('cathedras', models.TextField(blank=True, null=True, verbose_name='Кафедры')),
                ('lessons', models.TextField(blank=True, null=True, verbose_name='Шо ведет')),
            ],
            options={
                'verbose_name': 'Препод',
                'verbose_name_plural': 'Преподы',
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='Универ')),
            ],
            options={
                'verbose_name': 'Универ',
                'verbose_name_plural': 'Универы',
            },
        ),
        migrations.CreateModel(
            name='TeacherNGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.group', verbose_name='Группа')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.teacher', verbose_name='Препод')),
            ],
            options={
                'verbose_name': 'Препод+Группа',
                'verbose_name_plural': 'Преподы+Группы',
                'unique_together': {('teacher', 'group')},
            },
        ),
        migrations.AddField(
            model_name='teacher',
            name='groups',
            field=models.ManyToManyField(through='mainapp.TeacherNGroup', to='mainapp.Group'),
        ),
        migrations.CreateModel(
            name='ResultAnswers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_1', models.PositiveSmallIntegerField(verbose_name='Ответ')),
                ('answer_2', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Еще ответ')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.question', verbose_name='Вопрос')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.result')),
            ],
            options={
                'verbose_name': 'Ответ на вопрос',
                'verbose_name_plural': 'Ответы на вопросы',
            },
        ),
        migrations.AddField(
            model_name='result',
            name='teacher_n_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.teacherngroup', verbose_name='Препод и группа'),
        ),
        migrations.AddField(
            model_name='group',
            name='teachers',
            field=models.ManyToManyField(through='mainapp.TeacherNGroup', to='mainapp.Teacher'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_staff', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('univer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mainapp.university', verbose_name='Универ')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='result',
            unique_together={('user_id', 'teacher_n_group')},
        ),
    ]
